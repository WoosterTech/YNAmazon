"""This type stub file was generated by pyright."""

from abc import ABC
from typing import TYPE_CHECKING, Any

from amazonorders.conf import AmazonOrdersConfig
from amazonorders.session import AmazonSession
from amazonorders.util import AmazonSessionResponse
from bs4 import Tag
from requests import Response

__copyright__ = ...
__license__ = ...
if TYPE_CHECKING: ...

class AuthForm(ABC):
    """The base class of an authentication ``<form>`` that can be submitted.

    The base implementation will attempt to auto-solve Captcha. If this fails, it will
    use the default image view to show the Captcha prompt, and it will also pass the
    image URL to :func:`~amazonorders.session.IODefault.prompt` as ``img_url``.
    """
    def __init__(
        self,
        config: AmazonOrdersConfig,
        selector: str | None,
        error_selector: str | None = ...,
        critical: bool = ...,
    ) -> None: ...
    def select_form(self, amazon_session: AmazonSession, parsed: Tag) -> bool:
        """Using the ``selector`` defined on this instance, select the ``<form>`` for the given :class:`~bs4.Tag`.

        :param amazon_session: The ``AmazonSession`` on which to submit the form.
        :param parsed: The ``Tag`` from which to select the ``<form>``.
        :return: Whether the ``<form>`` selection was successful.
        """
        ...

    def fill_form(self, additional_attrs: dict[str, Any] | None = ...) -> None:
        """Populate the ``data`` field with values from the ``<form>``, including any additional attributes passed.

        :param additional_attrs: Additional attributes to add to the ``<form>`` data for submission.
        """
        ...

    def submit(self, last_response: Response) -> AmazonSessionResponse:
        """Submit the populated ``<form>``.

        :param last_response: The response of the request that fetched the form.
        :return: The response from the executed request.
        """
        ...

    def clear_form(self) -> None:
        """Clear the populated ``<form>`` so this class can be reused."""
        ...

class SignInForm(AuthForm):
    def __init__(
        self,
        config: AmazonOrdersConfig,
        selector: str | None = ...,
        solution_attr_key: str = ...,
    ) -> None: ...
    def fill_form(self, additional_attrs: dict[str, Any] | None = ...) -> None: ...

class MfaDeviceSelectForm(AuthForm):
    def __init__(
        self,
        config: AmazonOrdersConfig,
        selector: str | None = ...,
        solution_attr_key: str = ...,
    ) -> None: ...
    def fill_form(self, additional_attrs: dict[str, Any] | None = ...) -> None: ...

class MfaForm(AuthForm):
    def __init__(
        self,
        config: AmazonOrdersConfig,
        selector: str | None = ...,
        solution_attr_key: str = ...,
    ) -> None: ...
    def fill_form(self, additional_attrs: dict[str, Any] | None = ...) -> None: ...

class CaptchaForm(AuthForm):
    def __init__(
        self,
        config: AmazonOrdersConfig,
        selector: str | None = ...,
        error_selector: str | None = ...,
        solution_attr_key: str = ...,
    ) -> None: ...
    def fill_form(self, additional_attrs: dict[str, Any] | None = ...) -> None: ...

class JSAuthBlocker(AuthForm):
    def __init__(self, config: AmazonOrdersConfig, regex: str) -> None: ...
    def select_form(self, amazon_session: AmazonSession, parsed: Tag) -> bool: ...
