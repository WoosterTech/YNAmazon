"""This type stub file was generated by pyright."""

from typing import Any, Callable

from amazonorders.conf import AmazonOrdersConfig
from bs4 import Tag

__copyright__ = ...
__license__ = ...
logger = ...

class Parsable:
    def __init__(self, parsed: Tag, config: AmazonOrdersConfig) -> None: ...
    def __getstate__(self) -> dict: ...
    def safe_parse(self, parse_function: Callable[..., Any], **kwargs: Any) -> Any: ...
    def simple_parse(
        self,
        selector: str | list,
        attr_name: str | None = ...,
        text_contains: str | None = ...,
        required: bool = ...,
        prefix_split: str | None = ...,
        wrap_tag: type | None = ...,
        parse_date: bool = ...,
        prefix_split_fuzzy: bool = ...,
        suffix_split: str | None = ...,
        suffix_split_fuzzy: bool = ...,
    ) -> Any: ...
    def safe_simple_parse(self, selector: str | list, **kwargs: Any) -> Any:
        """A helper function that uses :func:`simple_parse` as the ``parse_function()`` passed to :func:`safe_parse`.

        :param selector: The CSS selector to pass to :func:`simple_parse`.
        :param kwargs: The ``kwargs`` will be passed to ``parse_function``.
        :return: The return value from :func:`simple_parse`.
        """
        ...

    def with_base_url(self, url: str) -> str:
        """If the given URL is relative, the ``BASE_URL`` will be prepended.

        :param url: The URL to check.
        :return: The fully qualified URL.
        """
        ...

    def to_currency(self, value: str | int | float) -> int | float | None:
        """Clean up a currency, stripping non-numeric values and returning it as a primitive.

        :param value: The currency to parse.
        :return: The currency as a primitive.
        """
        ...
