"""This type stub file was generated by pyright."""

from typing import Any

from amazonorders.conf import AmazonOrdersConfig
from amazonorders.util import AmazonSessionResponse
from requests import Response

__copyright__ = ...
__license__ = ...
logger = ...

class IODefault:
    def echo(self, msg: str, **kwargs: Any) -> None:
        """Echo a message to the console.

        :param msg: The data to send to output.
        :param kwargs: Unused by the default implementation.
        """
        ...

    def prompt(self, msg: str, type: Any | None = ..., **kwargs: Any) -> Any:
        """Prompt to the console for user input.

        :param msg: The data to use as the input prompt.
        :param type: Unused by the default implementation.
        :param kwargs: Unused by the default implementation.
        :return: The user input result.
        """
        ...

class AmazonSession:
    def __init__(
        self,
        username: str | None = ...,
        password: str | None = ...,
        debug: bool = ...,
        io: IODefault = ...,
        config: AmazonOrdersConfig | None = ...,
        auth_forms: list | None = ...,
        otp_secret_key: str | None = ...,
    ) -> None: ...
    def request(
        self, method: str, url: str, persist_cookies: bool = ..., **kwargs: Any
    ) -> AmazonSessionResponse:
        """Execute the request against Amazon with base headers, parsing and storing the response.

        :param method: The request method to execute.
        :param url: The URL to execute ``method`` on.
        :param persist_cookies: If ``True``, cookies from the response will be persisted to a file.
        :param kwargs: Remaining ``kwargs`` will be passed to :func:`requests.request`.
        :return: The response from the executed request.
        """
        ...

    def get(self, url: str, **kwargs: Any) -> AmazonSessionResponse:
        """Perform a ``GET`` request.

        :param url: The URL to request.
        :param kwargs: Remaining ``kwargs`` will be passed to :func:`AmazonSession.request`.
        :return: The response from the executed request.
        """
        ...

    def post(self, url: str, **kwargs: Any) -> AmazonSessionResponse:
        """Perform a ``POST`` request.

        :param url: The URL to request.
        :param kwargs: Remaining ``kwargs`` will be passed to :func:`AmazonSession.request`.
        :return: The response from the executed request.
        """
        ...

    def auth_cookies_stored(self) -> bool: ...
    def login(self) -> None: ...
    def logout(self) -> None:
        """Logout and close the existing Amazon session and clear cookies."""
        ...

    def build_response_error(self, response: Response) -> str:
        """Build an error message from the given response.

        :param response: The response to check and build a response.
        :return: The error message.
        """
        ...

    def check_response(
        self,
        amazon_session_response: AmazonSessionResponse,
        meta: dict[str, Any] | None = ...,
    ) -> None: ...
